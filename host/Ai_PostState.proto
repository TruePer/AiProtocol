package ai.proto;

import "host/Ai_Icons.proto";
import "host/Ai_Report.proto";

// Состояние поста отображется на ГИП Интегратора в виде карточки поста.
// Присылаемое состояние должно соответсвовать типу карточки.
// Более подробно смотрите в документации. Там представлен внешний вид кароточек и даны детальные описания, какой элемент отображения какому полю соответствует.

// Типы состояний, соответствующие типам карточек
// Пока единственный тип, потом их количество будет увеличено
enum StateType {
	ST_UNKNOWN = 1;
	ST_SIMPLE  = 2;     // Простой тип.
}

// Статусы режима работы
// Пост может быть запущен в одном из режимов работы
// Статусы режима работы отражают текущее состояние работы поста
enum PostModeStatus {
	PM_IDLE     = 1;  // Пост остановлен. На UI кнопка запуска режима принимает вид "Запустить"
	PM_STARTING = 2;  // Пост запускается для работы в заданном режиме
	PM_RUN      = 3;  // Пост работает в указанном режиме
	PM_STOPPING = 4;  // Пост останавливает работу в указанном режиме
}

// Состояние поста, соответствующее простой стандартной карточке
message SimpleState {
	required StatusIcon      main_status         = 1; // Основной статус
	repeated StatusIcon      additional_statuses = 2; // Дополнительные статусы, количество [0..9]
	repeated string          text_statuses       = 3; // Текстовые статусы, количество [0..3]
	optional string          current_mode_id     = 4; // Индекс текущего установленного режима работы. Должен быть установлен, если в конфигурационном файле задано более одного режима
	optional PostModeStatus  mode_status         = 5; // Статус режима работы
}

// Состояние поста
message PostState {
	required string          card_id             = 1; // Идентификатор карточки поста, на который будет выводиться статусная информация. Настраивается в конфигурационном файле запускаемого модуля
	required StateType       type                = 2; // Тип состояния, соответствующий карточке отображения
	optional SimpleState     simple_state        = 3; // Должно быть заполнено, если type == ST_SIMPLE
}

// Отправка состояния поста
message SetPostStateRequest {
	required PostState       post_state          = 1; // Состояние поста
}

// Ответ на отправку состояния поста
message SetPostStateResponse {
	required Report          report              = 1; // Отчет о выполнении
}
